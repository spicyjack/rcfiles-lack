#!/bin/bash

# SOURCE_DIR should be set prior to running any of the functions in this
# script
function git_check_src_dir {
    if [ -z $SOURCE_DIR ]; then
        echo "WARNING: SOURCE_DIR undefined"
        exit 1
    fi
} # checks to see if SOURCE_DIR has been set in the environment

function rungitcmd {
    local GIT_CMD=$1
    local GIT_SUCCESS_PATTERN=$2

    if [ $GIT_DEBUG -gt 0 ]; then echo "command: ${GIT_CMD}"; fi
    GIT_OUTPUT=$(${GIT_CMD} 2>&1)
    if [ $(echo $GIT_OUTPUT | grep -c "${GIT_SUCCESS_PATTERN}") -ne 1 ]; then
        echo $GIT_OUTPUT
    fi
}

function gitstat {
    GIT_DEBUG=0
    unset GIT_CMD
    if [ $# -gt 0 ]; then GIT_DEBUG=1; echo "GIT_DEBUG set to ${GIT_DEBUG}"; fi
    git_check_src_dir
    START_DIR=$PWD
    cd $SOURCE_DIR
    for DIR in $(/bin/ls | grep 'git$');
    do
        echo "=== git status: $DIR ===";
        cd $DIR
        IFS=$' \t'
        git status --short
        IFS=$' \t\n'
        cd $SOURCE_DIR
    done
    cd $START_DIR
} # check the status in git directories

function gitpullall {
    GIT_DEBUG=0
    unset GIT_CMD
    if [ $# -gt 0 ]; then GIT_DEBUG=1; echo "GIT_DEBUG set to ${GIT_DEBUG}"; fi
    git_check_src_dir
    START_DIR=$PWD
    cd $SOURCE_DIR
    for DIR in $(/bin/ls | grep 'git$');
    do
        echo "=== git pull: $DIR ===";
        cd $DIR
        IFS=$' \t'
        GIT_CMD="git pull --all"
        GIT_SUCCESS_PATTERN="Already up-to-date."
        rungitcmd "$GIT_CMD" "$GIT_SUCCESS_PATTERN"
        IFS=$' \t\n'
        cd $SOURCE_DIR
    done
    cd $START_DIR
} # git pull in all git directories

function gitupdatechk {
    local CHECK_DATE=$1
    if [ -z $CHECK_DATE ]; then
        echo "ERROR: need a date to check; date format is YYYY-MM-DD"
    else
        GIT_DEBUG=0
        unset GIT_CMD
        git_check_src_dir
        START_DIR=$PWD
        cd $SOURCE_DIR
        for DIR in $(/bin/ls | grep 'git$');
        do
            echo "=== git log: $DIR ===";
            cd $DIR
            GIT_FORMAT="%h %cd %an %s"
            IFS=$' \t'
            OUTPUT=$(git log --pretty=format:"${GIT_FORMAT}" \
                --after="${CHECK_DATE}" | cut -c -80)
            if [ -n "$OUTPUT" ]; then
                echo $OUTPUT
            fi
            IFS=$' \t\n'
            cd $SOURCE_DIR
        done
        cd $START_DIR
    fi
} # git pull in all git directories

function gitinchk {
    GIT_DEBUG=0
    unset GIT_CMD
    if [ $# -gt 0 ]; then GIT_DEBUG=1; echo "GIT_DEBUG set to ${GIT_DEBUG}"; fi
    git_check_src_dir
    START_DIR=$PWD
    cd $SOURCE_DIR
    for DIR in $(/bin/ls | grep git);
    do
        echo "=== git pull --dry-run $DIR ===";
        cd $DIR
        IFS=$' \t'
        GIT_CMD="git pull --dry-run"
        GIT_SUCCESS_PATTERN="Already up-to-date."
        rungitcmd "$GIT_CMD" "$GIT_SUCCESS_PATTERN"
        IFS=$' \t\n'
        cd $SOURCE_DIR
    done
    cd $START_DIR
} # check for inbound changes to git directories

function gitoutchk {
    GIT_DEBUG=0
    unset GIT_CMD
    if [ $# -gt 0 ]; then GIT_DEBUG=1; echo "GIT_DEBUG set to ${GIT_DEBUG}"; fi
    git_check_src_dir
    START_DIR=$PWD
    cd $SOURCE_DIR
    for DIR in $(/bin/ls | grep git);
    do
        echo "=== git push --dry-run $DIR ===";
        cd $DIR
        IFS=$' \t'
        GIT_CMD="git push --dry-run"
        GIT_SUCCESS_PATTERN="Everything up-to-date"
        rungitcmd "$GIT_CMD" "$GIT_SUCCESS_PATTERN"
        IFS=$' \t\n'
        cd $SOURCE_DIR
    done
    cd $START_DIR
} # check for outbound changes in git directories

# vi: set filetype=sh shiftwidth=4 tabstop=4
# fin!
